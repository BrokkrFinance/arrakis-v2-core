/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Underlying,
  UnderlyingInterface,
} from "../../../contracts/libraries/Underlying";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "current0_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "current1_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount0Max_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1Max_",
        type: "uint256",
      },
    ],
    name: "computeMintAmounts",
    outputs: [
      {
        internalType: "uint256",
        name: "mintAmount",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtRatioX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioAX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioBX96",
        type: "uint160",
      },
      {
        internalType: "int128",
        name: "liquidity",
        type: "int128",
      },
    ],
    name: "getAmountsForDelta",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "positionId",
            type: "bytes32",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceX96",
            type: "uint160",
          },
          {
            internalType: "contract IUniswapV3Pool",
            name: "pool",
            type: "IUniswapV3Pool",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "lowerTick",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "upperTick",
            type: "int24",
          },
        ],
        internalType: "struct PositionUnderlying",
        name: "positionUnderlying_",
        type: "tuple",
      },
    ],
    name: "getUnderlyingBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0Current",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1Current",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "positionId",
            type: "bytes32",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceX96",
            type: "uint160",
          },
          {
            internalType: "contract IUniswapV3Pool",
            name: "pool",
            type: "IUniswapV3Pool",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "lowerTick",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "upperTick",
            type: "int24",
          },
        ],
        internalType: "struct PositionUnderlying",
        name: "positionUnderlying_",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "mintAmount_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply_",
        type: "uint256",
      },
    ],
    name: "getUnderlyingBalancesMint",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0Current",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1Current",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rawFee0_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rawFee1_",
        type: "uint256",
      },
      {
        internalType: "uint16",
        name: "managerFeeBPS_",
        type: "uint16",
      },
    ],
    name: "subtractAdminFees",
    outputs: [
      {
        internalType: "uint256",
        name: "fee0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee1",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "int24",
                name: "lowerTick",
                type: "int24",
              },
              {
                internalType: "int24",
                name: "upperTick",
                type: "int24",
              },
              {
                internalType: "uint24",
                name: "feeTier",
                type: "uint24",
              },
            ],
            internalType: "struct Range[]",
            name: "ranges",
            type: "tuple[]",
          },
          {
            internalType: "contract IUniswapV3Factory",
            name: "factory",
            type: "IUniswapV3Factory",
          },
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "address",
            name: "self",
            type: "address",
          },
        ],
        internalType: "struct UnderlyingPayload",
        name: "underlyingPayload_",
        type: "tuple",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceX96_",
        type: "uint160",
      },
    ],
    name: "totalUnderlyingAtPriceWithFees",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "int24",
                name: "lowerTick",
                type: "int24",
              },
              {
                internalType: "int24",
                name: "upperTick",
                type: "int24",
              },
              {
                internalType: "uint24",
                name: "feeTier",
                type: "uint24",
              },
            ],
            internalType: "struct Range[]",
            name: "ranges",
            type: "tuple[]",
          },
          {
            internalType: "contract IUniswapV3Factory",
            name: "factory",
            type: "IUniswapV3Factory",
          },
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "address",
            name: "self",
            type: "address",
          },
        ],
        internalType: "struct UnderlyingPayload",
        name: "underlyingPayload_",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "mintAmount_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply_",
        type: "uint256",
      },
    ],
    name: "totalUnderlyingForMint",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "int24",
                name: "lowerTick",
                type: "int24",
              },
              {
                internalType: "int24",
                name: "upperTick",
                type: "int24",
              },
              {
                internalType: "uint24",
                name: "feeTier",
                type: "uint24",
              },
            ],
            internalType: "struct Range[]",
            name: "ranges",
            type: "tuple[]",
          },
          {
            internalType: "contract IUniswapV3Factory",
            name: "factory",
            type: "IUniswapV3Factory",
          },
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "address",
            name: "self",
            type: "address",
          },
        ],
        internalType: "struct UnderlyingPayload",
        name: "underlyingPayload_",
        type: "tuple",
      },
    ],
    name: "totalUnderlyingWithFees",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "self",
            type: "address",
          },
          {
            components: [
              {
                internalType: "int24",
                name: "lowerTick",
                type: "int24",
              },
              {
                internalType: "int24",
                name: "upperTick",
                type: "int24",
              },
              {
                internalType: "uint24",
                name: "feeTier",
                type: "uint24",
              },
            ],
            internalType: "struct Range",
            name: "range",
            type: "tuple",
          },
          {
            internalType: "contract IUniswapV3Pool",
            name: "pool",
            type: "IUniswapV3Pool",
          },
        ],
        internalType: "struct RangeData",
        name: "underlying_",
        type: "tuple",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceX96_",
        type: "uint160",
      },
    ],
    name: "underlying",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "self",
            type: "address",
          },
          {
            components: [
              {
                internalType: "int24",
                name: "lowerTick",
                type: "int24",
              },
              {
                internalType: "int24",
                name: "upperTick",
                type: "int24",
              },
              {
                internalType: "uint24",
                name: "feeTier",
                type: "uint24",
              },
            ],
            internalType: "struct Range",
            name: "range",
            type: "tuple",
          },
          {
            internalType: "contract IUniswapV3Pool",
            name: "pool",
            type: "IUniswapV3Pool",
          },
        ],
        internalType: "struct RangeData",
        name: "underlying_",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "mintAmount_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply_",
        type: "uint256",
      },
    ],
    name: "underlyingMint",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6128ce61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100c85760003560e01c8063bab6c56911610080578063c30fc38d11610065578063c30fc38d1461018c578063e56f4d91146101ad578063f05adb5e146101c057600080fd5b8063bab6c56914610166578063bc4212001461017957600080fd5b806348c619c7116100b157806348c619c7146101185780637c75bd781461014057806383d7ba9f1461015357600080fd5b80631f0f6656146100cd5780633ba5697814610105575b600080fd5b6100e06100db366004612104565b6101d3565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b6100e0610113366004612139565b61035d565b61012b610126366004612165565b6104bd565b604080519283526020830191909152016100fc565b6100e061014e36600461224f565b610516565b61012b610161366004612385565b6106c6565b6100e06101743660046123d3565b610ad8565b6100e0610187366004612407565b610c84565b61019f61019a36600461244e565b610ca4565b6040519081526020016100fc565b6100e06101bb366004612489565b610de6565b61012b6101ce3660046124cd565b610e06565b60008060008060008060008060008b604001516001600160a01b031663514ea4bf8d600001516040518263ffffffff1660e01b815260040161021791815260200190565b60a060405180830381865afa158015610234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102589190612540565b80955081965082975083985084995050505050506102d26040518060e001604052808681526020018581526020018e604001516001600160a01b03168152602001876001600160801b031681526020018e6060015160020b81526020018e6080015160020b81526020018e60a0015160020b815250610eb4565b90975095506102ea6001600160801b038316886125ad565b96506102ff6001600160801b038216876125ad565b95505050505061034b886020015161031a8a6080015161114f565b6103278b60a0015161114f565b6101ce610346610341876001600160801b03168e8e61156f565b611623565b6116bf565b80955081965050505093509350935093565b600080600080600080600080600089604001516001600160a01b031663514ea4bf8b600001516040518263ffffffff1660e01b81526004016103a191815260200190565b60a060405180830381865afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e29190612540565b945094509450945094506104526040518060e001604052808681526020018581526020018c604001516001600160a01b03168152602001876001600160801b031681526020018c6060015160020b81526020018c6080015160020b81526020018c60a0015160020b815250610eb4565b80975081985050506104828a6020015161046f8c6080015161114f565b61047c8d60a0015161114f565b88611764565b909950975061049a6001600160801b038316886125ad565b96506104af6001600160801b038216876125ad565b955050505050509193509193565b6000806127106104d161ffff8516876125c5565b6104db91906125fa565b6104e5908661260e565b91506127106104f861ffff8516866125c5565b61050291906125fa565b61050c908561260e565b9050935093915050565b60008060008060008087604001516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105859190612635565b50508c516020808f0151805191015160405163090477e560e11b81526001600160a01b039093166004840152600291820b6024840152900b604482015294965092945060009373__$b131e44167300e1b6d47510635310686a7$__9350631208efca92506064019050602060405180830381865af415801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f91906126d2565b905060006040518060c0016040528083815260200160008b6001600160a01b03161161065b578561065d565b8a5b6001600160a01b031681526020018b604001516001600160a01b031681526020018460020b81526020018b602001516000015160020b81526020018b602001516020015160020b81525090506106b28161035d565b929d919c509a509098509650505050505050565b60008060008060005b87515181101561086357600088602001516001600160a01b0316631698ee828a604001518b606001518c60000151868151811061070e5761070e6126eb565b602090810291909101015160409081015190517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015262ffffff166044820152606401602060405180830381865afa15801561078d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b19190612701565b905060008060008061081160405180606001604052808f608001516001600160a01b031681526020018f6000015189815181106107f0576107f06126eb565b60200260200101518152602001876001600160a01b03168152508d8d610ad8565b9350935093509350838a61082591906125ad565b9950610831838a6125ad565b985061083d82896125ad565b975061084981886125ad565b96505050505050808061085b9061271e565b9150506106cf565b506000876080015190506000806108d78585856001600160a01b031663ccdf7a026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101269190612737565b915091506109cf89846001600160a01b031663065756db6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561091d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094191906126d2565b6040808e015160808f015191516370a0823160e01b81526001600160a01b0392831660048201529116906370a0823190602401602060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b591906126d2565b6109bf90866125ad565b6109c9919061260e565b8a6117e6565b6109d990886125ad565b9650610abf89846001600160a01b03166342fb9d446040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4191906126d2565b60608d015160808e01516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab591906126d2565b6109bf90856125ad565b610ac990876125ad565b95505050505050935093915050565b60008060008060008088604001516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b479190612635565b505050505091509150600073__$b131e44167300e1b6d47510635310686a7$";

type UnderlyingConstructorParams =
  | [linkLibraryAddresses: UnderlyingLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UnderlyingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Underlying__factory extends ContractFactory {
  constructor(...args: UnderlyingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        Underlying__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: UnderlyingLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$b131e44167300e1b6d47510635310686a7\\$__", "g"),
      linkLibraryAddresses["contracts/libraries/Position.sol:Position"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Underlying & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Underlying__factory {
    return super.connect(runner) as Underlying__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UnderlyingInterface {
    return new Interface(_abi) as UnderlyingInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Underlying {
    return new Contract(address, _abi, runner) as unknown as Underlying;
  }
}

export interface UnderlyingLibraryAddresses {
  ["contracts/libraries/Position.sol:Position"]: string;
}
