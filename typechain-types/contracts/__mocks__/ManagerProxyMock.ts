/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type RangeStruct = {
  lowerTick: BigNumberish;
  upperTick: BigNumberish;
  feeTier: BigNumberish;
};

export type RangeStructOutput = [
  lowerTick: bigint,
  upperTick: bigint,
  feeTier: bigint
] & { lowerTick: bigint; upperTick: bigint; feeTier: bigint };

export type PositionLiquidityStruct = {
  liquidity: BigNumberish;
  range: RangeStruct;
};

export type PositionLiquidityStructOutput = [
  liquidity: bigint,
  range: RangeStructOutput
] & { liquidity: bigint; range: RangeStructOutput };

export type SwapPayloadStruct = {
  payload: BytesLike;
  router: AddressLike;
  amountIn: BigNumberish;
  expectedMinReturn: BigNumberish;
  zeroForOne: boolean;
};

export type SwapPayloadStructOutput = [
  payload: string,
  router: string,
  amountIn: bigint,
  expectedMinReturn: bigint,
  zeroForOne: boolean
] & {
  payload: string;
  router: string;
  amountIn: bigint;
  expectedMinReturn: bigint;
  zeroForOne: boolean;
};

export type RebalanceStruct = {
  burns: PositionLiquidityStruct[];
  mints: PositionLiquidityStruct[];
  swap: SwapPayloadStruct;
  minBurn0: BigNumberish;
  minBurn1: BigNumberish;
  minDeposit0: BigNumberish;
  minDeposit1: BigNumberish;
};

export type RebalanceStructOutput = [
  burns: PositionLiquidityStructOutput[],
  mints: PositionLiquidityStructOutput[],
  swap: SwapPayloadStructOutput,
  minBurn0: bigint,
  minBurn1: bigint,
  minDeposit0: bigint,
  minDeposit1: bigint
] & {
  burns: PositionLiquidityStructOutput[];
  mints: PositionLiquidityStructOutput[];
  swap: SwapPayloadStructOutput;
  minBurn0: bigint;
  minBurn1: bigint;
  minDeposit0: bigint;
  minDeposit1: bigint;
};

export interface ManagerProxyMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fundVaultBalance"
      | "managerFeeBPS"
      | "rebalance"
      | "setManagerFeeBPS"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fundVaultBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFeeBPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [AddressLike, RebalanceStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagerFeeBPS",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "fundVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFeeBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManagerFeeBPS",
    data: BytesLike
  ): Result;
}

export interface ManagerProxyMock extends BaseContract {
  connect(runner?: ContractRunner | null): ManagerProxyMock;
  waitForDeployment(): Promise<this>;

  interface: ManagerProxyMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fundVaultBalance: TypedContractMethod<
    [vault: AddressLike],
    [void],
    "payable"
  >;

  managerFeeBPS: TypedContractMethod<[], [bigint], "view">;

  rebalance: TypedContractMethod<
    [vaultV2: AddressLike, rebalanceParams_: RebalanceStruct],
    [void],
    "nonpayable"
  >;

  setManagerFeeBPS: TypedContractMethod<
    [vault_: AddressLike, fees_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fundVaultBalance"
  ): TypedContractMethod<[vault: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "managerFeeBPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [vaultV2: AddressLike, rebalanceParams_: RebalanceStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManagerFeeBPS"
  ): TypedContractMethod<
    [vault_: AddressLike, fees_: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
