/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type RangeStruct = {
  lowerTick: BigNumberish;
  upperTick: BigNumberish;
  feeTier: BigNumberish;
};

export type RangeStructOutput = [
  lowerTick: bigint,
  upperTick: bigint,
  feeTier: bigint
] & { lowerTick: bigint; upperTick: bigint; feeTier: bigint };

export type AmountStruct = { range: RangeStruct; amount: BigNumberish };

export type AmountStructOutput = [range: RangeStructOutput, amount: bigint] & {
  range: RangeStructOutput;
  amount: bigint;
};

export type PositionLiquidityStruct = {
  liquidity: BigNumberish;
  range: RangeStruct;
};

export type PositionLiquidityStructOutput = [
  liquidity: bigint,
  range: RangeStructOutput
] & { liquidity: bigint; range: RangeStructOutput };

export type UnderlyingOutputStruct = {
  amount0: BigNumberish;
  amount1: BigNumberish;
  fee0: BigNumberish;
  fee1: BigNumberish;
  leftOver0: BigNumberish;
  leftOver1: BigNumberish;
};

export type UnderlyingOutputStructOutput = [
  amount0: bigint,
  amount1: bigint,
  fee0: bigint,
  fee1: bigint,
  leftOver0: bigint,
  leftOver1: bigint
] & {
  amount0: bigint;
  amount1: bigint;
  fee0: bigint;
  fee1: bigint;
  leftOver0: bigint;
  leftOver1: bigint;
};

export interface ArrakisV2HelperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "factory"
      | "token0AndToken1ByRange"
      | "token0AndToken1PlusFeesByRange"
      | "totalLiquidity"
      | "totalUnderlying"
      | "totalUnderlyingAtPrice"
      | "totalUnderlyingWithFees"
      | "totalUnderlyingWithFeesAndLeftOver"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token0AndToken1ByRange",
    values: [RangeStruct[], AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "token0AndToken1PlusFeesByRange",
    values: [RangeStruct[], AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingAtPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingWithFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingWithFeesAndLeftOver",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "token0AndToken1ByRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token0AndToken1PlusFeesByRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingAtPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingWithFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingWithFeesAndLeftOver",
    data: BytesLike
  ): Result;
}

export interface ArrakisV2Helper extends BaseContract {
  connect(runner?: ContractRunner | null): ArrakisV2Helper;
  waitForDeployment(): Promise<this>;

  interface: ArrakisV2HelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  factory: TypedContractMethod<[], [string], "view">;

  token0AndToken1ByRange: TypedContractMethod<
    [
      ranges_: RangeStruct[],
      token0_: AddressLike,
      token1_: AddressLike,
      vaultV2_: AddressLike
    ],
    [
      [AmountStructOutput[], AmountStructOutput[]] & {
        amount0s: AmountStructOutput[];
        amount1s: AmountStructOutput[];
      }
    ],
    "view"
  >;

  token0AndToken1PlusFeesByRange: TypedContractMethod<
    [
      ranges_: RangeStruct[],
      token0_: AddressLike,
      token1_: AddressLike,
      vaultV2_: AddressLike
    ],
    [
      [
        AmountStructOutput[],
        AmountStructOutput[],
        AmountStructOutput[],
        AmountStructOutput[]
      ] & {
        amount0s: AmountStructOutput[];
        amount1s: AmountStructOutput[];
        fee0s: AmountStructOutput[];
        fee1s: AmountStructOutput[];
      }
    ],
    "view"
  >;

  totalLiquidity: TypedContractMethod<
    [vault_: AddressLike],
    [PositionLiquidityStructOutput[]],
    "view"
  >;

  totalUnderlying: TypedContractMethod<
    [vault_: AddressLike],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;

  totalUnderlyingAtPrice: TypedContractMethod<
    [vault_: AddressLike, sqrtPriceX96_: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;

  totalUnderlyingWithFees: TypedContractMethod<
    [vault_: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;

  totalUnderlyingWithFeesAndLeftOver: TypedContractMethod<
    [vault_: AddressLike],
    [UnderlyingOutputStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token0AndToken1ByRange"
  ): TypedContractMethod<
    [
      ranges_: RangeStruct[],
      token0_: AddressLike,
      token1_: AddressLike,
      vaultV2_: AddressLike
    ],
    [
      [AmountStructOutput[], AmountStructOutput[]] & {
        amount0s: AmountStructOutput[];
        amount1s: AmountStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "token0AndToken1PlusFeesByRange"
  ): TypedContractMethod<
    [
      ranges_: RangeStruct[],
      token0_: AddressLike,
      token1_: AddressLike,
      vaultV2_: AddressLike
    ],
    [
      [
        AmountStructOutput[],
        AmountStructOutput[],
        AmountStructOutput[],
        AmountStructOutput[]
      ] & {
        amount0s: AmountStructOutput[];
        amount1s: AmountStructOutput[];
        fee0s: AmountStructOutput[];
        fee1s: AmountStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalLiquidity"
  ): TypedContractMethod<
    [vault_: AddressLike],
    [PositionLiquidityStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalUnderlying"
  ): TypedContractMethod<
    [vault_: AddressLike],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalUnderlyingAtPrice"
  ): TypedContractMethod<
    [vault_: AddressLike, sqrtPriceX96_: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalUnderlyingWithFees"
  ): TypedContractMethod<
    [vault_: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalUnderlyingWithFeesAndLeftOver"
  ): TypedContractMethod<
    [vault_: AddressLike],
    [UnderlyingOutputStructOutput],
    "view"
  >;

  filters: {};
}
