/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type RangeStruct = {
  lowerTick: BigNumberish;
  upperTick: BigNumberish;
  feeTier: BigNumberish;
};

export type RangeStructOutput = [
  lowerTick: bigint,
  upperTick: bigint,
  feeTier: bigint
] & { lowerTick: bigint; upperTick: bigint; feeTier: bigint };

export type InitializePayloadStruct = {
  feeTiers: BigNumberish[];
  token0: AddressLike;
  token1: AddressLike;
  owner: AddressLike;
  init0: BigNumberish;
  init1: BigNumberish;
  manager: AddressLike;
  routers: AddressLike[];
  factory: AddressLike;
};

export type InitializePayloadStructOutput = [
  feeTiers: bigint[],
  token0: string,
  token1: string,
  owner: string,
  init0: bigint,
  init1: bigint,
  manager: string,
  routers: string[],
  factory: string
] & {
  feeTiers: bigint[];
  token0: string;
  token1: string;
  owner: string;
  init0: bigint;
  init1: bigint;
  manager: string;
  routers: string[];
  factory: string;
};

export type PositionLiquidityStruct = {
  liquidity: BigNumberish;
  range: RangeStruct;
};

export type PositionLiquidityStructOutput = [
  liquidity: bigint,
  range: RangeStructOutput
] & { liquidity: bigint; range: RangeStructOutput };

export type SwapPayloadStruct = {
  payload: BytesLike;
  router: AddressLike;
  amountIn: BigNumberish;
  expectedMinReturn: BigNumberish;
  zeroForOne: boolean;
};

export type SwapPayloadStructOutput = [
  payload: string,
  router: string,
  amountIn: bigint,
  expectedMinReturn: bigint,
  zeroForOne: boolean
] & {
  payload: string;
  router: string;
  amountIn: bigint;
  expectedMinReturn: bigint;
  zeroForOne: boolean;
};

export type RebalanceStruct = {
  burns: PositionLiquidityStruct[];
  mints: PositionLiquidityStruct[];
  swap: SwapPayloadStruct;
  minBurn0: BigNumberish;
  minBurn1: BigNumberish;
  minDeposit0: BigNumberish;
  minDeposit1: BigNumberish;
};

export type RebalanceStructOutput = [
  burns: PositionLiquidityStructOutput[],
  mints: PositionLiquidityStructOutput[],
  swap: SwapPayloadStructOutput,
  minBurn0: bigint,
  minBurn1: bigint,
  minDeposit0: bigint,
  minDeposit1: bigint
] & {
  burns: PositionLiquidityStructOutput[];
  mints: PositionLiquidityStructOutput[];
  swap: SwapPayloadStructOutput;
  minBurn0: bigint;
  minBurn1: bigint;
  minDeposit0: bigint;
  minDeposit1: bigint;
};

export interface IArrakisV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPools"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blacklistRouters"
      | "burn"
      | "getPools"
      | "getRanges"
      | "getRouters"
      | "init0"
      | "init1"
      | "initialize"
      | "manager"
      | "managerBalance0"
      | "managerBalance1"
      | "managerFeeBPS"
      | "mint"
      | "rebalance"
      | "removePools"
      | "setInits"
      | "setManager"
      | "setManagerFeeBPS"
      | "token0"
      | "token1"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "whitelistRouters"
      | "withdrawManagerBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "LogAddPools"
      | "LogBlacklistRouters"
      | "LogCollectedFees"
      | "LogRemovePools"
      | "LogSetInits"
      | "LogSetManager"
      | "LogSetManagerFeeBPS"
      | "LogWhitelistRouters"
      | "LogWithdrawManagerBalance"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addPools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistRouters",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getPools", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRanges", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRouters",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init0", values?: undefined): string;
  encodeFunctionData(functionFragment: "init1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, InitializePayloadStruct]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "managerBalance0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerBalance1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerFeeBPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [RebalanceStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removePools",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setInits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagerFeeBPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRouters",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawManagerBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRanges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRouters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerBalance0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerBalance1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFeeBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setInits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManagerFeeBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawManagerBalance",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogAddPoolsEvent {
  export type InputTuple = [feeTiers: BigNumberish[]];
  export type OutputTuple = [feeTiers: bigint[]];
  export interface OutputObject {
    feeTiers: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogBlacklistRoutersEvent {
  export type InputTuple = [routers: AddressLike[]];
  export type OutputTuple = [routers: string[]];
  export interface OutputObject {
    routers: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogCollectedFeesEvent {
  export type InputTuple = [fee0: BigNumberish, fee1: BigNumberish];
  export type OutputTuple = [fee0: bigint, fee1: bigint];
  export interface OutputObject {
    fee0: bigint;
    fee1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRemovePoolsEvent {
  export type InputTuple = [pools: AddressLike[]];
  export type OutputTuple = [pools: string[]];
  export interface OutputObject {
    pools: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetInitsEvent {
  export type InputTuple = [init0: BigNumberish, init1: BigNumberish];
  export type OutputTuple = [init0: bigint, init1: bigint];
  export interface OutputObject {
    init0: bigint;
    init1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetManagerEvent {
  export type InputTuple = [newManager: AddressLike];
  export type OutputTuple = [newManager: string];
  export interface OutputObject {
    newManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetManagerFeeBPSEvent {
  export type InputTuple = [managerFeeBPS: BigNumberish];
  export type OutputTuple = [managerFeeBPS: bigint];
  export interface OutputObject {
    managerFeeBPS: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWhitelistRoutersEvent {
  export type InputTuple = [routers: AddressLike[]];
  export type OutputTuple = [routers: string[]];
  export interface OutputObject {
    routers: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawManagerBalanceEvent {
  export type InputTuple = [amount0: BigNumberish, amount1: BigNumberish];
  export type OutputTuple = [amount0: bigint, amount1: bigint];
  export interface OutputObject {
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IArrakisV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IArrakisV2;
  waitForDeployment(): Promise<this>;

  interface: IArrakisV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPools: TypedContractMethod<
    [feeTiers_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  blacklistRouters: TypedContractMethod<
    [routers_: AddressLike[]],
    [void],
    "nonpayable"
  >;

  burn: TypedContractMethod<
    [burnAmount_: BigNumberish, receiver_: AddressLike],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  getPools: TypedContractMethod<[], [string[]], "view">;

  getRanges: TypedContractMethod<[], [RangeStructOutput[]], "view">;

  getRouters: TypedContractMethod<[], [string[]], "view">;

  init0: TypedContractMethod<[], [bigint], "view">;

  init1: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [name_: string, symbol_: string, params_: InitializePayloadStruct],
    [void],
    "nonpayable"
  >;

  manager: TypedContractMethod<[], [string], "view">;

  managerBalance0: TypedContractMethod<[], [bigint], "view">;

  managerBalance1: TypedContractMethod<[], [bigint], "view">;

  managerFeeBPS: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [mintAmount_: BigNumberish, receiver_: AddressLike],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  rebalance: TypedContractMethod<
    [rebalanceParams_: RebalanceStruct],
    [void],
    "nonpayable"
  >;

  removePools: TypedContractMethod<
    [pools_: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setInits: TypedContractMethod<
    [init0_: BigNumberish, init1_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setManager: TypedContractMethod<
    [manager_: AddressLike],
    [void],
    "nonpayable"
  >;

  setManagerFeeBPS: TypedContractMethod<
    [managerFeeBPS_: BigNumberish],
    [void],
    "nonpayable"
  >;

  token0: TypedContractMethod<[], [string], "view">;

  token1: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  whitelistRouters: TypedContractMethod<
    [routers_: AddressLike[]],
    [void],
    "nonpayable"
  >;

  withdrawManagerBalance: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPools"
  ): TypedContractMethod<[feeTiers_: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "blacklistRouters"
  ): TypedContractMethod<[routers_: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [burnAmount_: BigNumberish, receiver_: AddressLike],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPools"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRanges"
  ): TypedContractMethod<[], [RangeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRouters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "init0"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "init1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [name_: string, symbol_: string, params_: InitializePayloadStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "managerBalance0"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "managerBalance1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "managerFeeBPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [mintAmount_: BigNumberish, receiver_: AddressLike],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [rebalanceParams_: RebalanceStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removePools"
  ): TypedContractMethod<[pools_: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInits"
  ): TypedContractMethod<
    [init0_: BigNumberish, init1_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManager"
  ): TypedContractMethod<[manager_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setManagerFeeBPS"
  ): TypedContractMethod<[managerFeeBPS_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token0"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistRouters"
  ): TypedContractMethod<[routers_: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawManagerBalance"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "LogAddPools"
  ): TypedContractEvent<
    LogAddPoolsEvent.InputTuple,
    LogAddPoolsEvent.OutputTuple,
    LogAddPoolsEvent.OutputObject
  >;
  getEvent(
    key: "LogBlacklistRouters"
  ): TypedContractEvent<
    LogBlacklistRoutersEvent.InputTuple,
    LogBlacklistRoutersEvent.OutputTuple,
    LogBlacklistRoutersEvent.OutputObject
  >;
  getEvent(
    key: "LogCollectedFees"
  ): TypedContractEvent<
    LogCollectedFeesEvent.InputTuple,
    LogCollectedFeesEvent.OutputTuple,
    LogCollectedFeesEvent.OutputObject
  >;
  getEvent(
    key: "LogRemovePools"
  ): TypedContractEvent<
    LogRemovePoolsEvent.InputTuple,
    LogRemovePoolsEvent.OutputTuple,
    LogRemovePoolsEvent.OutputObject
  >;
  getEvent(
    key: "LogSetInits"
  ): TypedContractEvent<
    LogSetInitsEvent.InputTuple,
    LogSetInitsEvent.OutputTuple,
    LogSetInitsEvent.OutputObject
  >;
  getEvent(
    key: "LogSetManager"
  ): TypedContractEvent<
    LogSetManagerEvent.InputTuple,
    LogSetManagerEvent.OutputTuple,
    LogSetManagerEvent.OutputObject
  >;
  getEvent(
    key: "LogSetManagerFeeBPS"
  ): TypedContractEvent<
    LogSetManagerFeeBPSEvent.InputTuple,
    LogSetManagerFeeBPSEvent.OutputTuple,
    LogSetManagerFeeBPSEvent.OutputObject
  >;
  getEvent(
    key: "LogWhitelistRouters"
  ): TypedContractEvent<
    LogWhitelistRoutersEvent.InputTuple,
    LogWhitelistRoutersEvent.OutputTuple,
    LogWhitelistRoutersEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdrawManagerBalance"
  ): TypedContractEvent<
    LogWithdrawManagerBalanceEvent.InputTuple,
    LogWithdrawManagerBalanceEvent.OutputTuple,
    LogWithdrawManagerBalanceEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "LogAddPools(uint24[])": TypedContractEvent<
      LogAddPoolsEvent.InputTuple,
      LogAddPoolsEvent.OutputTuple,
      LogAddPoolsEvent.OutputObject
    >;
    LogAddPools: TypedContractEvent<
      LogAddPoolsEvent.InputTuple,
      LogAddPoolsEvent.OutputTuple,
      LogAddPoolsEvent.OutputObject
    >;

    "LogBlacklistRouters(address[])": TypedContractEvent<
      LogBlacklistRoutersEvent.InputTuple,
      LogBlacklistRoutersEvent.OutputTuple,
      LogBlacklistRoutersEvent.OutputObject
    >;
    LogBlacklistRouters: TypedContractEvent<
      LogBlacklistRoutersEvent.InputTuple,
      LogBlacklistRoutersEvent.OutputTuple,
      LogBlacklistRoutersEvent.OutputObject
    >;

    "LogCollectedFees(uint256,uint256)": TypedContractEvent<
      LogCollectedFeesEvent.InputTuple,
      LogCollectedFeesEvent.OutputTuple,
      LogCollectedFeesEvent.OutputObject
    >;
    LogCollectedFees: TypedContractEvent<
      LogCollectedFeesEvent.InputTuple,
      LogCollectedFeesEvent.OutputTuple,
      LogCollectedFeesEvent.OutputObject
    >;

    "LogRemovePools(address[])": TypedContractEvent<
      LogRemovePoolsEvent.InputTuple,
      LogRemovePoolsEvent.OutputTuple,
      LogRemovePoolsEvent.OutputObject
    >;
    LogRemovePools: TypedContractEvent<
      LogRemovePoolsEvent.InputTuple,
      LogRemovePoolsEvent.OutputTuple,
      LogRemovePoolsEvent.OutputObject
    >;

    "LogSetInits(uint256,uint256)": TypedContractEvent<
      LogSetInitsEvent.InputTuple,
      LogSetInitsEvent.OutputTuple,
      LogSetInitsEvent.OutputObject
    >;
    LogSetInits: TypedContractEvent<
      LogSetInitsEvent.InputTuple,
      LogSetInitsEvent.OutputTuple,
      LogSetInitsEvent.OutputObject
    >;

    "LogSetManager(address)": TypedContractEvent<
      LogSetManagerEvent.InputTuple,
      LogSetManagerEvent.OutputTuple,
      LogSetManagerEvent.OutputObject
    >;
    LogSetManager: TypedContractEvent<
      LogSetManagerEvent.InputTuple,
      LogSetManagerEvent.OutputTuple,
      LogSetManagerEvent.OutputObject
    >;

    "LogSetManagerFeeBPS(uint16)": TypedContractEvent<
      LogSetManagerFeeBPSEvent.InputTuple,
      LogSetManagerFeeBPSEvent.OutputTuple,
      LogSetManagerFeeBPSEvent.OutputObject
    >;
    LogSetManagerFeeBPS: TypedContractEvent<
      LogSetManagerFeeBPSEvent.InputTuple,
      LogSetManagerFeeBPSEvent.OutputTuple,
      LogSetManagerFeeBPSEvent.OutputObject
    >;

    "LogWhitelistRouters(address[])": TypedContractEvent<
      LogWhitelistRoutersEvent.InputTuple,
      LogWhitelistRoutersEvent.OutputTuple,
      LogWhitelistRoutersEvent.OutputObject
    >;
    LogWhitelistRouters: TypedContractEvent<
      LogWhitelistRoutersEvent.InputTuple,
      LogWhitelistRoutersEvent.OutputTuple,
      LogWhitelistRoutersEvent.OutputObject
    >;

    "LogWithdrawManagerBalance(uint256,uint256)": TypedContractEvent<
      LogWithdrawManagerBalanceEvent.InputTuple,
      LogWithdrawManagerBalanceEvent.OutputTuple,
      LogWithdrawManagerBalanceEvent.OutputObject
    >;
    LogWithdrawManagerBalance: TypedContractEvent<
      LogWithdrawManagerBalanceEvent.InputTuple,
      LogWithdrawManagerBalanceEvent.OutputTuple,
      LogWithdrawManagerBalanceEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
