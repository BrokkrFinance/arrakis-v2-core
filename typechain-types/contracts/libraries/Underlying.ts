/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type PositionUnderlyingStruct = {
  positionId: BytesLike;
  sqrtPriceX96: BigNumberish;
  pool: AddressLike;
  tick: BigNumberish;
  lowerTick: BigNumberish;
  upperTick: BigNumberish;
};

export type PositionUnderlyingStructOutput = [
  positionId: string,
  sqrtPriceX96: bigint,
  pool: string,
  tick: bigint,
  lowerTick: bigint,
  upperTick: bigint
] & {
  positionId: string;
  sqrtPriceX96: bigint;
  pool: string;
  tick: bigint;
  lowerTick: bigint;
  upperTick: bigint;
};

export type RangeStruct = {
  lowerTick: BigNumberish;
  upperTick: BigNumberish;
  feeTier: BigNumberish;
};

export type RangeStructOutput = [
  lowerTick: bigint,
  upperTick: bigint,
  feeTier: bigint
] & { lowerTick: bigint; upperTick: bigint; feeTier: bigint };

export type UnderlyingPayloadStruct = {
  ranges: RangeStruct[];
  factory: AddressLike;
  token0: AddressLike;
  token1: AddressLike;
  self: AddressLike;
};

export type UnderlyingPayloadStructOutput = [
  ranges: RangeStructOutput[],
  factory: string,
  token0: string,
  token1: string,
  self: string
] & {
  ranges: RangeStructOutput[];
  factory: string;
  token0: string;
  token1: string;
  self: string;
};

export type RangeDataStruct = {
  self: AddressLike;
  range: RangeStruct;
  pool: AddressLike;
};

export type RangeDataStructOutput = [
  self: string,
  range: RangeStructOutput,
  pool: string
] & { self: string; range: RangeStructOutput; pool: string };

export interface UnderlyingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "computeMintAmounts"
      | "getAmountsForDelta"
      | "getUnderlyingBalances"
      | "getUnderlyingBalancesMint"
      | "subtractAdminFees"
      | "totalUnderlyingAtPriceWithFees"
      | "totalUnderlyingForMint"
      | "totalUnderlyingWithFees"
      | "underlying"
      | "underlyingMint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeMintAmounts",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsForDelta",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingBalances",
    values: [PositionUnderlyingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingBalancesMint",
    values: [PositionUnderlyingStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subtractAdminFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingAtPriceWithFees",
    values: [UnderlyingPayloadStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingForMint",
    values: [UnderlyingPayloadStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingWithFees",
    values: [UnderlyingPayloadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values: [RangeDataStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingMint",
    values: [RangeDataStruct, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeMintAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsForDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingBalancesMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subtractAdminFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingAtPriceWithFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingForMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingWithFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingMint",
    data: BytesLike
  ): Result;
}

export interface Underlying extends BaseContract {
  connect(runner?: ContractRunner | null): Underlying;
  waitForDeployment(): Promise<this>;

  interface: UnderlyingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  computeMintAmounts: TypedContractMethod<
    [
      current0_: BigNumberish,
      current1_: BigNumberish,
      totalSupply_: BigNumberish,
      amount0Max_: BigNumberish,
      amount1Max_: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getAmountsForDelta: TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;

  getUnderlyingBalances: TypedContractMethod<
    [positionUnderlying_: PositionUnderlyingStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0Current: bigint;
        amount1Current: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;

  getUnderlyingBalancesMint: TypedContractMethod<
    [
      positionUnderlying_: PositionUnderlyingStruct,
      mintAmount_: BigNumberish,
      totalSupply_: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0Current: bigint;
        amount1Current: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;

  subtractAdminFees: TypedContractMethod<
    [
      rawFee0_: BigNumberish,
      rawFee1_: BigNumberish,
      managerFeeBPS_: BigNumberish
    ],
    [[bigint, bigint] & { fee0: bigint; fee1: bigint }],
    "view"
  >;

  totalUnderlyingAtPriceWithFees: TypedContractMethod<
    [underlyingPayload_: UnderlyingPayloadStruct, sqrtPriceX96_: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;

  totalUnderlyingForMint: TypedContractMethod<
    [
      underlyingPayload_: UnderlyingPayloadStruct,
      mintAmount_: BigNumberish,
      totalSupply_: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;

  totalUnderlyingWithFees: TypedContractMethod<
    [underlyingPayload_: UnderlyingPayloadStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;

  underlying: TypedContractMethod<
    [underlying_: RangeDataStruct, sqrtPriceX96_: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;

  underlyingMint: TypedContractMethod<
    [
      underlying_: RangeDataStruct,
      mintAmount_: BigNumberish,
      totalSupply_: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "computeMintAmounts"
  ): TypedContractMethod<
    [
      current0_: BigNumberish,
      current1_: BigNumberish,
      totalSupply_: BigNumberish,
      amount0Max_: BigNumberish,
      amount1Max_: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmountsForDelta"
  ): TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnderlyingBalances"
  ): TypedContractMethod<
    [positionUnderlying_: PositionUnderlyingStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0Current: bigint;
        amount1Current: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnderlyingBalancesMint"
  ): TypedContractMethod<
    [
      positionUnderlying_: PositionUnderlyingStruct,
      mintAmount_: BigNumberish,
      totalSupply_: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0Current: bigint;
        amount1Current: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "subtractAdminFees"
  ): TypedContractMethod<
    [
      rawFee0_: BigNumberish,
      rawFee1_: BigNumberish,
      managerFeeBPS_: BigNumberish
    ],
    [[bigint, bigint] & { fee0: bigint; fee1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalUnderlyingAtPriceWithFees"
  ): TypedContractMethod<
    [underlyingPayload_: UnderlyingPayloadStruct, sqrtPriceX96_: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalUnderlyingForMint"
  ): TypedContractMethod<
    [
      underlyingPayload_: UnderlyingPayloadStruct,
      mintAmount_: BigNumberish,
      totalSupply_: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalUnderlyingWithFees"
  ): TypedContractMethod<
    [underlyingPayload_: UnderlyingPayloadStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "underlying"
  ): TypedContractMethod<
    [underlying_: RangeDataStruct, sqrtPriceX96_: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "underlyingMint"
  ): TypedContractMethod<
    [
      underlying_: RangeDataStruct,
      mintAmount_: BigNumberish,
      totalSupply_: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        fee0: bigint;
        fee1: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
